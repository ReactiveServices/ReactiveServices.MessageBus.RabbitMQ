// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.MessageBus.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Padrão Request Response")]
    public partial class PadraoRequestResponseFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RequestResponse.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Padrão Request Response", "Como um componente de software\r\nDesejo publicar uma solicitação no barramento de " +
                    "mensagens e receber uma resposta a esta solicitação\r\nPara que eu posso contar co" +
                    "m a participação de outros componentes de software na resolução de meus problema" +
                    "s", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma solicitação e receber uma resposta")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarUmaSolicitacaoEReceberUmaResposta(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma solicitação e receber uma resposta", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 13
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma solicitação e não receber uma resposta")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarUmaSolicitacaoENaoReceberUmaResposta(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "slow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma solicitação e não receber uma resposta", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("que não exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Re" +
                    "questX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 22
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 24
 testRunner.Then("o solicitante \'RequesterA\' não deve receber uma resposta à solicitação \'RX\' envia" +
                    "da pelo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma solicitação e receber uma resposta com uma inscrição específica")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarUmaSolicitacaoEReceberUmaRespostaComUmaInscricaoEspecifica(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma solicitação e receber uma resposta com uma inscrição específica", @__tags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\' com uma inscrição SubscriptionX", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\' com uma inscrição SubscriptionX", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 34
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 35
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma solicitação e não receber uma resposta devido a inscrição incorreta")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarUmaSolicitacaoENaoReceberUmaRespostaDevidoAInscricaoIncorreta(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "slow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma solicitação e não receber uma resposta devido a inscrição incorreta", @__tags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\' com uma inscrição SubscriptionX", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 44
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 45
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 46
 testRunner.Then("o solicitante \'RequesterA\' não deve receber uma resposta à solicitação \'RX\' envia" +
                    "da pelo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações de tipos distintos e receber duas respostas de tipos d" +
            "istintos")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDeTiposDistintosEReceberDuasRespostasDeTiposDistintos(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações de tipos distintos e receber duas respostas de tipos d" +
                    "istintos", @__tags);
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 55
 testRunner.And("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 56
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 57
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 58
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 59
 testRunner.And(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RY\' do tipo \'RequestY\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 60
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 61
 testRunner.And("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RY\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações de mesmo tipo e receber duas respostas de mesmo tipo")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDeMesmoTipoEReceberDuasRespostasDeMesmoTipo(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações de mesmo tipo e receber duas respostas de mesmo tipo", @__tags);
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 70
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 71
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX1\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 72
 testRunner.And(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX2\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 73
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX1\' enviada " +
                    "pelo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 74
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX2\' enviada " +
                    "pelo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações distintas a partir de um único solicitante a dois soli" +
            "citados distintos, cada um tratando um único tipo de solicitação")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDistintasAPartirDeUmUnicoSolicitanteADoisSolicitadosDistintosCadaUmTratandoUmUnicoTipoDeSolicitacao(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações distintas a partir de um único solicitante a dois soli" +
                    "citados distintos, cada um tratando um único tipo de solicitação", @__tags);
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 83
 testRunner.And("que exista um solicitado \'ResponderB\' aguardando por solicitações do tipo \'Reques" +
                    "tY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 84
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 85
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 86
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 87
 testRunner.And(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RY\' do tipo \'RequestY\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 88
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 89
 testRunner.And("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RY\' enviada p" +
                    "elo solicitado \'ResponderB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações distintas a partir de dois solicitantes distintos a um" +
            " único solicitado")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDistintasAPartirDeDoisSolicitantesDistintosAUmUnicoSolicitado(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "slow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações distintas a partir de dois solicitantes distintos a um" +
                    " único solicitado", @__tags);
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 98
 testRunner.And("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 99
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 100
 testRunner.And("que exista um solicitante \'RequesterB\' pronto para enviar solicitações do tipo \'R" +
                    "equestY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 101
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 102
 testRunner.And(string.Format("o solicitante \'RequesterB\' enviar uma solicitação \'RY\' do tipo \'RequestY\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 103
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 104
 testRunner.And("o solicitante \'RequesterB\' deve receber uma resposta à solicitação \'RY\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações distintas a partir de dois solicitantes distintos a do" +
            "is solicitados distintos, cada um tratando um único tipo de solicitação")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDistintasAPartirDeDoisSolicitantesDistintosADoisSolicitadosDistintosCadaUmTratandoUmUnicoTipoDeSolicitacao(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "stable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações distintas a partir de dois solicitantes distintos a do" +
                    "is solicitados distintos, cada um tratando um único tipo de solicitação", @__tags);
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 113
 testRunner.And("que exista um solicitado \'ResponderB\' aguardando por solicitações do tipo \'Reques" +
                    "tY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 114
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 115
 testRunner.And("que exista um solicitante \'RequesterB\' pronto para enviar solicitações do tipo \'R" +
                    "equestY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 116
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX\' do tipo \'RequestX\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 117
 testRunner.And(string.Format("o solicitante \'RequesterB\' enviar uma solicitação \'RY\' do tipo \'RequestY\' em modo" +
                        " {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 118
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX\' enviada p" +
                    "elo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 119
 testRunner.And("o solicitante \'RequesterB\' deve receber uma resposta à solicitação \'RY\' enviada p" +
                    "elo solicitado \'ResponderB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações do mesmo tipo a partir de dois solicitantes distintos " +
            "a um único solicitado")]
        [NUnit.Framework.CategoryAttribute("unstable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDoMesmoTipoAPartirDeDoisSolicitantesDistintosAUmUnicoSolicitado(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unstable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações do mesmo tipo a partir de dois solicitantes distintos " +
                    "a um único solicitado", @__tags);
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 128
 testRunner.And("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 129
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 130
 testRunner.And("que exista um solicitante \'RequesterB\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 131
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX1\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 132
 testRunner.And(string.Format("o solicitante \'RequesterB\' enviar uma solicitação \'RX2\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 133
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX1\' ou uma r" +
                    "esposta à solicitação \'RX2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 134
 testRunner.And("o solicitante \'RequesterB\' deve receber uma resposta à solicitação \'RX2\' ou uma r" +
                    "esposta à solicitação \'RX1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar duas solicitações do mesmo tipo a partir de dois solicitantes distintos " +
            "a dois solicitados distintos, cada um tratando um único tipo de solicitação")]
        [NUnit.Framework.CategoryAttribute("unstable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        [NUnit.Framework.TestCaseAttribute("sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("assincrono", null)]
        public virtual void PublicarDuasSolicitacoesDoMesmoTipoAPartirDeDoisSolicitantesDistintosADoisSolicitadosDistintosCadaUmTratandoUmUnicoTipoDeSolicitacao(string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unstable",
                    "fast"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar duas solicitações do mesmo tipo a partir de dois solicitantes distintos " +
                    "a dois solicitados distintos, cada um tratando um único tipo de solicitação", @__tags);
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 143
 testRunner.And("que exista um solicitado \'ResponderB\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 144
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 145
 testRunner.And("que exista um solicitante \'RequesterB\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 146
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar uma solicitação \'RX1\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 147
 testRunner.And(string.Format("o solicitante \'RequesterB\' enviar uma solicitação \'RX2\' do tipo \'RequestX\' em mod" +
                        "o {0}", sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 148
 testRunner.Then("o solicitante \'RequesterA\' deve receber uma resposta à solicitação \'RX1\' ou uma r" +
                    "esposta à solicitação \'RX2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 149
 testRunner.And("o solicitante \'RequesterB\' deve receber uma resposta à solicitação \'RX2\' ou uma r" +
                    "esposta à solicitação \'RX1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar um grande volume de uma mesma solicitação para dois solicitados distinto" +
            "s")]
        [NUnit.Framework.CategoryAttribute("unstable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        [NUnit.Framework.TestCaseAttribute("20", "sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("20", "assincrono", null)]
        [NUnit.Framework.TestCaseAttribute("40", "sincrono", null)]
        [NUnit.Framework.TestCaseAttribute("40", "assincrono", null)]
        public virtual void PublicarUmGrandeVolumeDeUmaMesmaSolicitacaoParaDoisSolicitadosDistintos(string messageCount, string sincronoOuAssincrono, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unstable",
                    "slow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar um grande volume de uma mesma solicitação para dois solicitados distinto" +
                    "s", @__tags);
#line 156
this.ScenarioSetup(scenarioInfo);
#line 157
 testRunner.Given("que exista um solicitado \'ResponderA\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 158
 testRunner.And("que exista um solicitado \'ResponderB\' aguardando por solicitações do tipo \'Reques" +
                    "tX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 159
 testRunner.And("que exista um solicitante \'RequesterA\' pronto para enviar solicitações do tipo \'R" +
                    "equestX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 160
 testRunner.When(string.Format("o solicitante \'RequesterA\' enviar {0} solicitações do tipo \'RequestX\' em modo {1}" +
                        "", messageCount, sincronoOuAssincrono), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 161
 testRunner.Then(string.Format("o solicitante \'RequesterA\' deve receber {0} respostas às solicitações do tipo \'Re" +
                        "questX\' enviadas por qualquer solicitado", messageCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 162
 testRunner.And("deve haver ao menos uma resposta à solicitação de tipo \'RequestX\' que tenha sido " +
                    "enviada pelo solicitado \'ResponderA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 163
 testRunner.And("deve haver ao menos uma resposta à solicitação de tipo \'RequestX\' que tenha sido " +
                    "enviada pelo solicitado \'ResponderB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
