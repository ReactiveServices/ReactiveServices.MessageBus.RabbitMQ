// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReactiveServices.MessageBus.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Storage Types")]
    public partial class StorageTypesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StorageTypes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Storage Types", @"Como um trocador de mensagens
Desejo ser capaz de informar se um determinado tipo de mensagem deve ter seu armazenamento persistente ou transiente
Para que eu possa evitar que determinados tipos de mensagem gastem recursos de armazenamento persistente sem necessidade", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo persistente, sem preparação prévia e sem reiniciar " +
            "o servidor")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void PublicarUmaMensagemDoTipoPersistenteSemPreparacaoPreviaESemReiniciarOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo persistente, sem preparação prévia e sem reiniciar " +
                    "o servidor", new string[] {
                        "stable",
                        "fast"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que um assinante se inscreva para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.When("a mensagem EventOccurred for publicada como persistente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 12
 testRunner.Then("a mensagem EventOccurred deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo transiente, sem preparação prévia e sem reiniciar o" +
            " servidor")]
        [NUnit.Framework.CategoryAttribute("unstable")]
        [NUnit.Framework.CategoryAttribute("fast")]
        public virtual void PublicarUmaMensagemDoTipoTransienteSemPreparacaoPreviaESemReiniciarOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo transiente, sem preparação prévia e sem reiniciar o" +
                    " servidor", new string[] {
                        "unstable",
                        "fast"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("que um assinante se inscreva para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 17
 testRunner.When("a mensagem EventOccurred for publicada como transiente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 18
 testRunner.Then("a mensagem EventOccurred deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo persistente, sem preparação prévia, antes da inscri" +
            "ção e reiniciando o servidor")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void PublicarUmaMensagemDoTipoPersistenteSemPreparacaoPreviaAntesDaInscricaoEReiniciandoOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo persistente, sem preparação prévia, antes da inscri" +
                    "ção e reiniciando o servidor", new string[] {
                        "stable",
                        "slow"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.When("a mensagem EventOccurred for publicada como persistente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 23
 testRunner.And("o servidor de mensageria for reiniciado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.And("um assinante se inscrever para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 25
 testRunner.Then("a mensagem EventOccurred não deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo transiente, sem preparação prévia, antes da inscriç" +
            "ão e reiniciando o servidor")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void PublicarUmaMensagemDoTipoTransienteSemPreparacaoPreviaAntesDaInscricaoEReiniciandoOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo transiente, sem preparação prévia, antes da inscriç" +
                    "ão e reiniciando o servidor", new string[] {
                        "stable",
                        "slow"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.When("a mensagem EventOccurred for publicada como transiente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 30
 testRunner.And("o servidor de mensageria for reiniciado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
 testRunner.And("um assinante se inscrever para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 32
 testRunner.Then("a mensagem EventOccurred não deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo persistente, com preparação prévia, antes da inscri" +
            "ção e reiniciando o servidor")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void PublicarUmaMensagemDoTipoPersistenteComPreparacaoPreviaAntesDaInscricaoEReiniciandoOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo persistente, com preparação prévia, antes da inscri" +
                    "ção e reiniciando o servidor", new string[] {
                        "stable",
                        "slow"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("que seja preparada uma inscrição para a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 37
 testRunner.When("a mensagem EventOccurred for publicada como persistente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 38
 testRunner.And("o servidor de mensageria for reiniciado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 39
 testRunner.And("um assinante se inscrever para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 40
 testRunner.Then("a mensagem EventOccurred deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publicar uma mensagem do tipo transiente, com preparação prévia, antes da inscriç" +
            "ão e reiniciando o servidor")]
        [NUnit.Framework.CategoryAttribute("stable")]
        [NUnit.Framework.CategoryAttribute("slow")]
        public virtual void PublicarUmaMensagemDoTipoTransienteComPreparacaoPreviaAntesDaInscricaoEReiniciandoOServidor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publicar uma mensagem do tipo transiente, com preparação prévia, antes da inscriç" +
                    "ão e reiniciando o servidor", new string[] {
                        "stable",
                        "slow"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("que seja preparada uma inscrição para a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 45
 testRunner.When("a mensagem EventOccurred for publicada como transiente no barramento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 46
 testRunner.And("o servidor de mensageria for reiniciado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 47
 testRunner.And("um assinante se inscrever para receber a mensagem EventOccurred", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 48
 testRunner.Then("a mensagem EventOccurred não deve ser entregue ao assinante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
